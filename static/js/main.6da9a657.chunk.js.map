{"version":3,"sources":["common/ask.ts","actions/utils.ts","actions/index.ts","reducers/index.ts","components/constants.ts","components/NewAskForm.tsx","components/AsksList.tsx","components/Score.tsx","components/AppView.tsx","components/App.tsx","serviceWorker.ts","index.tsx"],"names":["AskStatus","isAsk","potentialAsk","id","question","askee","timestamp","status","Boolean","potentialAskStatus","Accepted","Rejected","Unanswered","isAskStatus","scoreAsk","ask","ActionCreatorBuilder","type","factory","PayloadFactoryActionCreatorBuilder","this","PayloadActionCreatorBuilder","creator","payload","args","createAsk","withPayloadFactory","Date","now","cuid","build","approveAsk","withPayload","rejectAsk","nullAction","getAllAsks","asks","state","byId","allIds","action","fromActions","addAsk","updateAskStatus","getAskById","getAskIds","askId","score","map","reduce","x","y","TestIDs","NewAskForm","onSubmitAsk","useState","setQuestion","questionError","setQuestionError","setAskee","askeeError","setAskeeError","validate","length","data-testid","className","onSubmit","e","preventDefault","placeholder","value","onChange","target","QuestionInput","AskeeInput","AskSubmit","QuestionError","AskeeError","AsksList","reject","accept","Header","key","FormattedDate","AcceptRejectButtons","AsksListHeader","Fragment","onClick","dateTime","toString","toLocaleString","Score","AppView","Title","init","initialState","data","localStorage","getItem","console","log","asksUnvalidated","errorMessage","JSON","parse","error","undefined","filter","reducer","window","location","hostname","match","ReactDOM","render","useReducer","dispatch","allAsks","setItem","stringify","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.6da9a657.chunk.js","sourcesContent":["\nexport enum AskStatus {\n    Accepted = \"Accepted\",\n    Rejected = \"Rejected\",\n    Unanswered = \"Unanswered\",\n}\n\nfunction isAskStatus(potentialAskStatus: any): potentialAskStatus is AskStatus {\n  switch(potentialAskStatus) {\n    case AskStatus.Accepted:\n    case AskStatus.Rejected:\n    case AskStatus.Unanswered:\n      return true;\n    default:\n      return false;\n  }\n}\n\nexport interface Ask {\n  id: string;\n  timestamp: number;\n  question: string;\n  askee: string;\n  status: AskStatus;\n}\n\nexport function isAsk(potentialAsk: any): potentialAsk is Ask {\n  const { id, question, askee, timestamp, status} = potentialAsk;\n  return Boolean(\n    typeof id === \"string\"\n    && typeof question === \"string\"\n    && typeof askee === \"string\"\n    && typeof timestamp === \"number\"\n    && isAskStatus(status)\n  );\n}\n\nfunction sum(nums: number[]) {\n    return nums.reduce((x, y) => x + y, 0);\n}\n\nfunction scoreAsk(ask: Ask): number {\n    switch (ask.status) {\n        case AskStatus.Accepted: return 1;\n        case AskStatus.Rejected: return 10;\n        default: return 0;\n    }\n}\n\nexport function getScore(asks: Ask[]): number {\n    return sum(asks.map(scoreAsk));\n}\n","\n/**\n * Factory for creating action creator functions of a simple { type } or\n * { type, payload } format, with strong typing. The factory also adds\n * a strongly typed `.type` annotation to the built function.\n */\nexport class ActionCreatorBuilder<TType> {\n    constructor(\n        private type: TType\n    ) {}\n\n    public withPayloadFactory<TPayload extends TArgs, TArgs = TPayload>(\n        factory: (args: TArgs) => TPayload\n    ) {\n        return new PayloadFactoryActionCreatorBuilder<TType, TPayload, TArgs>(this.type, factory);\n    }\n\n    public withPayload<TPayload = {}>() {\n        return new PayloadActionCreatorBuilder<TType, TPayload>(this.type);\n    }\n\n    public build() {\n        const creator = (): {type: TType} => ({ type: this.type });\n        creator.type = this.type;\n        return creator;\n    }\n}\n\nclass PayloadActionCreatorBuilder<TType, TPayload = {}>{\n    constructor(\n        private type: TType\n    ) {}\n\n    public build() {\n        const creator =\n            (payload: TPayload): {type: TType; payload: TPayload} => ({type: this.type, payload });\n        creator.type = this.type;\n        return creator;\n    }\n}\n\nclass PayloadFactoryActionCreatorBuilder<TType, TPayload extends TArgs, TArgs = {}>{\n    constructor(\n        private type: TType,\n        private factory: (args: TArgs) => TPayload\n    ) {}\n\n    public build() {\n        const creator =\n            (args: TArgs): {type: TType; payload: TPayload} => ({type: this.type, payload: this.factory(args) });\n        creator.type = this.type;\n        return creator;\n    }\n}\n\n","import  cuid from \"cuid\";\n\nimport { AskStatus } from \"../common/ask\";\nimport { ActionCreatorBuilder } from \"./utils\";\n\ntype Ask = import(\"../common/ask\").Ask;\ntype Optional<T, K extends string|number|symbol> = Omit<T, K> & Partial<T>;\n\nexport type AsksAction =\n    | ReturnType<typeof createAsk>\n    | ReturnType<typeof approveAsk>\n    | ReturnType<typeof rejectAsk>\n    | ReturnType<typeof nullAction>;\n\nexport const CREATE_ASK: \"REJECTION/CREATE_ASK\" = \"REJECTION/CREATE_ASK\";\nexport const createAsk =\n    new ActionCreatorBuilder(CREATE_ASK)\n        .withPayloadFactory<Ask, Optional<Ask, \"timestamp\"|\"id\"|\"status\">>(\n            ({\n                question,\n                askee,\n                timestamp = Date.now(),\n                id = cuid(),\n                status = AskStatus.Unanswered\n            }) => ({ question, askee, timestamp, id, status })\n        )\n        .build();\n\nexport const APPROVE_ASK: \"REJECTION/APPROVE_ASK\" = \"REJECTION/APPROVE_ASK\";\nexport const approveAsk =\n    new ActionCreatorBuilder(APPROVE_ASK)\n        .withPayload<{ id: string }>()\n        .build();\n\nexport const REJECT_ASK: \"REJECTION/REJECT_ASK\" = \"REJECTION/REJECT_ASK\";\nexport const rejectAsk =\n    new ActionCreatorBuilder(REJECT_ASK)\n        .withPayload<{ id: string }>()\n        .build();\n\nexport const NULL_ACTION: \"REJECTION/NULL\" = \"REJECTION/NULL\";\nexport const nullAction = new ActionCreatorBuilder(NULL_ACTION).build();\n","import * as fromActions from \"../actions\";\nimport * as ask from \"../common/ask\";\nimport { AskStatus } from \"../common/ask\";\n\ntype Ask = import(\"../common/ask\").Ask;\ntype AsksAction = import(\"../actions\").AsksAction\n\nexport interface AsksState {\n    byId: {\n        [id: string]: Ask;\n    };\n    allIds: string[];\n}\n\nexport default function asks(\n    state: AsksState = { byId: {}, allIds: [] },\n    action: AsksAction\n) {\n    switch (action.type) {\n        case fromActions.createAsk.type:\n            return addAsk(state, action.payload);\n\n        case fromActions.approveAsk.type:\n            return updateAskStatus(state, action.payload.id, AskStatus.Accepted);\n\n        case fromActions.rejectAsk.type:\n            return updateAskStatus(state, action.payload.id, AskStatus.Rejected);\n\n        default:\n            return state;\n    }\n}\n\nexport function initialState() {\n    return asks(undefined, fromActions.nullAction());\n}\n\nfunction addAsk(state: AsksState, ask: Ask) {\n    const { id } = ask;\n    if (state.byId[id]) {\n        return state;\n    }\n    return {\n        ...state,\n        byId: {\n            ...state.byId,\n            [id]: ask\n        },\n        allIds: [ ...state.allIds, id ]\n    };\n}\n\nfunction updateAskStatus(state: AsksState, id: string, status: AskStatus): AsksState {\n    if (!getAskById(state, id)) {\n        return state;\n    }\n    return {\n        ...state,\n        byId: {\n            ...state.byId,\n            [id]: {...state.byId[id], status: status }\n        }\n    };\n}\n\nexport function getAskById(state: AsksState, id: string): Ask|undefined {\n    return state.byId[id];\n}\n\nexport function getAskCount(state: AsksState): number {\n    return state.allIds.length;\n}\n\nfunction getAskIds(state: AsksState) {\n    return state.allIds;\n}\n\nexport function* getAllAsks(state: AsksState): Generator<Ask> {\n    for (const askId of getAskIds(state)) {\n        const ask = getAskById(state, askId);\n        if (ask) {\n            yield ask;\n        }\n    }\n}\n\nexport function score(state: AsksState) {\n    return ask.getScore([...getAllAsks(state)]);\n}\n","\nexport enum TestIDs {\n    Title = \"title\",\n    NewAskForm = \"new-ask-form\",\n    AsksList = \"asks-list\",\n    AsksListHeader = \"asks-list-header\",\n    QuestionInput = \"question-input\",\n    AskeeInput = \"askee-input\",\n    AskSubmit = \"ask-submit\",\n    QuestionError = \"question-error\",\n    AskeeError = \"askee-error\",\n    Score = \"score\",\n}\n","import React, { useState } from 'react';\n\nimport \"../css/NewAskForm.css\";\n\nimport { TestIDs } from \"./constants\";\n\ninterface Props {\n  onSubmitAsk: (question: string, askee: string) => void;\n}\n\nexport default function NewAskForm({ onSubmitAsk }: Props) {\n  const [question, setQuestion] = useState(\"\");\n  const [questionError, setQuestionError] = useState(\"\");\n  const [askee, setAskee] = useState(\"\");\n  const [askeeError, setAskeeError] = useState(\"\");\n\n  const onSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (validate()) {\n      onSubmitAsk(question, askee);\n      setQuestion(\"\");\n      setAskee(\"\");\n    }\n  };\n\n  const validate = () => {\n\n    const questionError =\n      question.length < 3\n        ? \"Question must be at least 3 characters long\"\n        : \"\";\n\n    const askeeError =\n      askee.length < 3\n        ? \"Askee must be at least 3 characters long\"\n        : \"\";\n\n    setQuestionError(questionError);\n    setAskeeError(askeeError);\n\n    return !(questionError || askeeError);\n  };\n\n  return (\n    <form\n      data-testid={TestIDs.NewAskForm}\n      className=\"new-ask-form\"\n      onSubmit={onSubmit}>\n\n      <input\n        type=\"text\"\n        placeholder=\"What do you want to ask for?\"\n        value={question}\n        onChange={e => { setQuestion(e.target.value); }}\n        className=\"question-input\"\n        data-testid={TestIDs.QuestionInput} />\n      <input\n        type=\"text\"\n        placeholder=\"Who are you asking?\"\n        value={askee}\n        onChange={e => { setAskee(e.target.value); }}\n        className=\"askee-input\"\n        data-testid={TestIDs.AskeeInput} />\n      <input\n        type=\"submit\"\n        value=\"Ask!\"\n        data-testid={TestIDs.AskSubmit}\n        className=\"button-primary\" />\n      <ul className=\"errors\">\n        {questionError ? <li data-testid={TestIDs.QuestionError}>{questionError}</li> : null}\n        {askeeError ? <li data-testid={TestIDs.AskeeError}>{askeeError}</li> : null}\n      </ul>\n    </form>\n  );\n}","import React from 'react';\n\nimport \"../css/AsksList.css\";\n\nimport { Ask, AskStatus } from \"../common/ask\";\nimport { TestIDs } from \"./constants\";\n\ninterface Props {\n    asks: Ask[];\n    reject: (askId: string) => void;\n    accept: (askId: string) => void;\n}\n\nexport default function AsksList({ asks, reject, accept }: Props) {\n  return (\n    <div data-testid={TestIDs.AsksList} className=\"asks-list\">\n      <table>\n        {\n          asks.length < 1\n            ? null\n            : <Header />\n        }\n\n        <tbody>\n        {\n          asks.map(ask => (\n            <tr key={ask.id} className=\"ask\" data-testid={`ask=${ask.id}`}>\n              <td className=\"ask-question\">{ask.question}</td>\n              <td className=\"ask-askee\">{ask.askee}</td>\n              <td className=\"ask-date\">\n                <FormattedDate timestamp={ask.timestamp} />\n              </td>\n              <td className={`ask-status ${ask.status}`}>\n                {\n                  ask.status === AskStatus.Unanswered\n                    ? <AcceptRejectButtons\n                        askId={ask.id}\n                        accept={accept}\n                        reject={reject} />\n                    : ask.status\n                }\n              </td>\n            </tr>\n          ))\n        }\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nfunction Header() {\n  return (\n    <thead data-testid={TestIDs.AsksListHeader}>\n      <tr>\n        <th>Question</th>\n        <th>Askee</th>\n        <th>Date</th>\n        <th>Status</th>\n      </tr>\n    </thead>\n  );\n}\n\nfunction AcceptRejectButtons({\n  askId,\n  accept,\n  reject\n}: { askId: string} & Pick<Props, \"accept\"|\"reject\">) {\n  return (\n    <React.Fragment>\n      <button\n        className=\"accept\"\n        onClick={() => { accept(askId); }}>\n          Accept\n      </button>\n      <button\n        className=\"reject\"\n        onClick={() => { reject(askId); }}>\n          Reject\n      </button>\n    </React.Fragment>\n  );\n}\n\nfunction FormattedDate({ timestamp }: { timestamp: number }) {\n  return (\n    <time dateTime={(new Date(timestamp)).toString()}>\n      {new Date(timestamp).toLocaleString()}\n    </time>\n  );\n}\n","import React from \"react\";\nimport \"../css/Score.css\";\nimport { TestIDs } from \"./constants\";\n\nexport default function Score({ score }: { score: number }) {\n    return (\n        <div data-testid={TestIDs.Score} className=\"score-container\">\n            Score: <span className=\"score\">{score}</span>\n        </div>\n    );\n}","import React from 'react';\nimport '../css/normalize.css';\nimport '../css/skeleton.css';\nimport \"../css/AppView.css\";\n\nimport { TestIDs } from \"./constants\";\n\nimport NewAskForm from \"./NewAskForm\";\nimport AsksList from \"./AsksList\";\nimport Score from \"./Score\";\n\ntype Ask = import(\"../common/ask\").Ask;\n\ninterface Props {\n  asks: Ask[];\n  onSubmitAsk: (question: string, askee: string) => void;\n  accept: (askId: string) => void;\n  reject: (askId: string) => void;\n  score: number;\n}\n\nexport default function AppView({\n  onSubmitAsk,\n  accept,\n  reject,\n  asks,\n  score,\n}: Props) {\n\n  return (\n    <div className=\"App container\">\n      <header className=\"App-header row\">\n        <div className=\"twelve columns\">\n          <h1 data-testid={TestIDs.Title}>Rejection App</h1>\n        </div>\n      </header>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <NewAskForm onSubmitAsk={onSubmitAsk} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <Score score={score} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"twelve columns\">\n          <AsksList asks={asks} reject={reject} accept={accept} />\n        </div>\n      </div>\n    </div>\n  );\n}\n\n","import React, { useReducer } from 'react';\n\nimport { isAsk } from \"../common/ask\";\nimport reducer, { initialState, getAllAsks, score } from \"../reducers\";\nimport * as fromActions from \"../actions\";\n\nimport AppView from \"./AppView\";\n\ntype Ask = import(\"../common/ask\").Ask;\ntype AsksState = import(\"../reducers\").AsksState;\n\nexport const STORAGE_KEY = \"rejection-app\"\n\n\n\nexport default function App() {\n\n  const [state, dispatch] = useReducer(reducer, initialState(), init);\n\n  // Store changes in localStorage\n  const allAsks = [...getAllAsks(state)];\n  localStorage.setItem(STORAGE_KEY, JSON.stringify({ asks: [...getAllAsks(state)] }));\n\n  const onSubmitAsk =\n    (question: string, askee: string) => {\n        dispatch(fromActions.createAsk({ question, askee }));\n    };\n\n  const reject =\n    (id: string) => { dispatch(fromActions.rejectAsk({ id })); };\n\n  const accept =\n    (id: string) => { dispatch(fromActions.approveAsk({ id })); };\n\n  return (\n    <AppView\n      asks={allAsks}\n      score={score(state)}\n      onSubmitAsk={onSubmitAsk}\n      accept={accept}\n      reject={reject} />\n  );\n\n}\n\n/**\n * Load state from Localstorage\n */\nfunction init(initialState: AsksState): AsksState {\n\n  const data = localStorage.getItem(STORAGE_KEY);\n\n  // Fallback if there is no data\n  if (!data) {\n    console.log(\"No saved state to load.\")\n    return initialState;\n  }\n\n  const errorMessage = \"Saved state was invalid.\";\n\n  // Fallback if not valid JSON\n  let asksUnvalidated: Ask[];\n  try {\n    asksUnvalidated = JSON.parse(data).asks;\n  } catch (e) {\n    console.error(errorMessage)\n    return initialState;\n  }\n\n  // Fallback if ask key not present\n  if (asksUnvalidated === undefined) {\n    console.error(errorMessage);\n    return initialState;\n  }\n\n  // Fallback if asks is not an array\n  if (typeof asksUnvalidated.filter !== \"function\") {\n    console.error(errorMessage);\n    return initialState;\n  }\n\n  // Filter out any invalid entries\n  const asks = asksUnvalidated.filter(isAsk);\n\n  // Log if there are invalid asks\n  if (asks.length < asksUnvalidated.length) {\n    console.error(\n      `Could not load complete state. ${asksUnvalidated.length - asks.length} invalid Asks.`);\n  }\n\n  // Reconstruct state\n  const actions = asks.map(ask => fromActions.createAsk(ask));\n  const state = actions.reduce(reducer, initialState);\n\n  console.log(\"Reconstructed state from storage successfully.\")\n  return state;\n\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}